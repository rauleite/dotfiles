---
- name: Configurar ambiente de desenvolvimento
  hosts: localhost
  connection: local
  # become: yes
  vars:
    nvm_version: "v0.40.3"
    neovim_version: "v0.11.2"
    dotfiles_dir: "{{ ansible_user_dir }}/dotfiles"
    font_dir: "/usr/share/fonts"
    unified_history: "{{ ansible_env.HOME }}/.history"
    pipx_path: "{{ ansible_env.HOME }}/.venvs/pipx_venv/bin"
    powerlevel10k_fonts:
      "MesloLGS NF Regular.ttf": "https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf"
      "MesloLGS NF Bold.ttf": "https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold.ttf"
      "MesloLGS NF Italic.ttf": "https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Italic.ttf"
      "MesloLGS NF Bold Italic.ttf": "https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold%20Italic.ttf"
    system_packages:
      - build-essential # 'Make' para luasnip
      - curl
      # - git
      - xclip # para poder copiar para área de transfência do SO para o nvim e vice-versa
      - fontconfig # pelo 'fc-cache'
      - fd-find # usado pelo picker (snack) / ps. telescope também usava
      - ripgrep # usado pelo picker (snack)
      - tmux
      - zsh
      - sqlite3
      - libsqlite3-dev
      - luarocks
      - fzf

  tasks:
    # - name: Mostrar o valor de variáveis
    #   ansible.builtin.debug:
    #     msg:
    #       - "O valor de is_updated é: {{ is_updated }}"
    #       - "O valor de has_git é: {{ has_git }}"
    #       - "O valor de is_upgraded é: {{ is_upgraded }}"
    #       - "Resultado da is_updated: {{ is_updated is defined and is_updated | default('') | string | length > 0 and is_updated | int == 1 }}"
    #       - "Resultado da is_upgraded: {{ is_upgraded is defined and is_upgraded | default('') | string | length > 0 and is_upgraded | int == 1 }}"
    #       - "Resultado da has_git: {{ has_git is defined and has_git | default('') | string | length > 0 and has_git | int == 1 }}"

    - name: Executar update do APT
      ansible.builtin.apt:
        update_cache: yes
      become: yes
      become_user: root
      become_method: sudo
      when: is_updated is not defined or is_updated | default('') | string | length == 0 or is_updated | int != 1

    - name: Executar upgrade no Ubuntu
      ansible.builtin.apt:
        upgrade: yes
      become: yes
      when: is_upgraded is not defined or is_upgraded | default('') | string | length == 0 or is_upgraded | int != 1

    # - name: Finalizar execução
    #   ansible.builtin.meta: end_play

    - name: Instalar pacotes do sistema
      become: yes
      apt:
        name: "{{ system_packages }}"
        state: present

    # ----------------------------------------
    # Instalando piplexed, atualizador de pacotes instalados via pipx
    - name: Instalar pacotes via pipx
      tags: pipx_packages
      block:
        - name: Obter a lista de pacotes instalados via pipx
          ansible.builtin.command:
            cmd: "{{ pipx_path }}/pipx list --short"
          register: pipx_list
          changed_when: false

        - name: Instalar pacotes pipx se não estiverem instalados
          ansible.builtin.command:
            cmd: "{{ pipx_path }}/pipx install {{ item }}"
          loop:
            - piplexed
            - tmuxp
          when: item not in pipx_list.stdout
    # ----------------------------------------

    - name: Verificar se Oh My Zsh já está instalado
      stat:
        path: "~/.oh-my-zsh"
      register: omz_installed

    - name: Instalar Oh My Zsh
      shell: sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
      when: not omz_installed.stat.exists
      args:
        executable: /bin/zsh

    # Links ----------------------------------
    - name: Linkar .zshrc
      file:
        src: "{{ dotfiles_dir }}/zsh/.zshrc"
        dest: "~/.zshrc"
        state: link
        force: yes

    - name: Linkar .p10k
      file:
        src: "{{ dotfiles_dir }}/zsh/.p10k.zsh"
        dest: "~/.p10k.zsh"
        state: link
        force: yes
      tags:
        - p10k_install

    - name: Linkar configuração do Tmux
      file:
        src: "{{ dotfiles_dir }}/tmux/.tmux.conf"
        dest: "~/.tmux.conf"
        state: link
        force: yes
    # -----------------------------------------

    - name: "Configurar ambiente compartilhado para Bash e Zsh"
      tags:
        - shared_shell
      block:
        - name: Verificar se o arquivo compartilhado ~/.bash_zsh_rc existe
          ansible.builtin.stat:
            path: "{{ ansible_env.HOME }}/.bash_zsh_rc"
          register: shared_env_file

        - name: Criar arquivo ~/.bash_zsh_rc com HISTFILE se não existir
          ansible.builtin.copy:
            dest: "{{ ansible_env.HOME }}/.bash_zsh_rc"
            content: "HISTFILE=~/.history\n"
            mode: "0644"
          when: not shared_env_file.stat.exists

        - name: Garantir que ~/.bashrc e ~/.zshrc carreguem o arquivo compartilhado
          ansible.builtin.blockinfile:
            path: "{{ item }}"
            marker: "# {mark} ANSIBLE: Load shared environment"
            block: |
              if [ -f "$HOME/.bash_zsh_rc" ]; then
                  . "$HOME/.bash_zsh_rc"
              fi
          loop:
            - "{{ ansible_env.HOME }}/.bashrc"
            - "{{ ansible_env.HOME }}/.zshrc"

        - name: Adicionar variável XAUTHORITY ao ~/.bash_zsh_rc se não existir
          ansible.builtin.lineinfile:
            path: "{{ ansible_env.HOME }}/.bash_zsh_rc"
            line: "export XAUTHORITY=~/.Xauthority"
            state: present
            regexp: "^export XAUTHORITY="

        - name: Adicionar pipx ao PATH em ~/.bash_zsh_rc se não existir
          ansible.builtin.lineinfile:
            path: "{{ ansible_env.HOME }}/.bash_zsh_rc"
            line: 'export PATH="$PATH:{{ pipx_path }}"'
            state: present
            regexp: "^export PATH=.*{{ pipx_path }}"

        # deslinka a implementação do oh-my-zsh do link, que não faz o parse correto
        - name: Adicionar 'unalias history' ao ~/.bash_zsh_rc se não existir
          ansible.builtin.lineinfile:
            path: "{{ ansible_env.HOME }}/.bash_zsh_rc"
            line: "unalias history"
            regexp: "^unalias history"

    - name: Criar diretório de fontes
      file:
        path: "{{ font_dir }}"
        state: directory
        mode: "0755"

    - name: Verificar se as fontes já estão instaladas
      stat:
        path: "{{ font_dir }}/{{ item.key }}"
      loop: "{{ powerlevel10k_fonts | dict2items }}"
      register: fonts_exist

    - name: Baixar e instalar fontes do Powerlevel10k
      become: yes
      loop: "{{ powerlevel10k_fonts | dict2items }}"
      get_url:
        url: "{{ item.value }}"
        dest: "{{ font_dir }}/{{ item.key }}"
        mode: "0644"
      when: not (fonts_exist.results | selectattr('item.key', 'equalto', item.key) | map(attribute='stat.exists') | first | default(False))

    - name: Atualizar cache de fontes
      command: fc-cache -fv "{{ font_dir }}"

    - name: Instalar plugins do Zsh
      block:
        - name: Clonar zsh-autosuggestions
          git:
            repo: https://github.com/zsh-users/zsh-autosuggestions
            dest: "~/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
            force: no

        - name: Clonar zsh-syntax-highlighting
          git:
            repo: https://github.com/zsh-users/zsh-syntax-highlighting.git
            dest: "~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"
            force: no

        - name: Clonar tema powerlevel10k
          git:
            repo: https://github.com/romkatv/powerlevel10k.git
            dest: "~/.oh-my-zsh/custom/themes/powerlevel10k"
            depth: 0
            force: no

    # Instalar binário do neovim -----------------
    - name: Instalar binário do neovim
      tags: neovim_bin
      block:
        - name: Criar diretório de configuração do Neovim
          file:
            path: "~/.config/nvim"
            state: directory

        - name: Linkar configuração do Neovim
          file:
            src: "{{ dotfiles_dir }}/nvim"
            dest: "~/.config/nvim"
            state: link
            force: yes # Permite substituir um arquivo/diretório existente pelo link

        - block:
            - name: Baixar Neovim
              get_url:
                url: "https://github.com/neovim/neovim/releases/download/{{ neovim_version }}/nvim-linux-x86_64.tar.gz"
                dest: "/tmp/nvim-linux-x86_64.tar.gz"
                mode: "0644"
              # tags:
              #   - neovim_bin

            - name: Extrair Neovim
              unarchive:
                src: "/tmp/nvim-linux-x86_64.tar.gz"
                dest: "/tmp"
                remote_src: yes
              # tags:
              #   - neovim_bin

            - name: Remover instalação anterior do Neovim
              become: yes
              file:
                path: "/usr/local/nvim"
                state: absent
              # tags:
              #   - neovim_bin

            - name: Mover Neovim para diretório de instalação
              become: yes
              command: mv /tmp/nvim-linux-x86_64 /usr/local/nvim
              args:
                creates: /usr/local/nvim
              # tags:
              #   - neovim_bin

            - name: Criar link simbólico para o Neovim
              become: yes
              file:
                src: "/usr/local/nvim/bin/nvim"
                dest: "/usr/local/bin/nvim"
                state: link
                force: yes
              # tags:
              #   - neovim_bin

            - name: Remover arquivo baixado do Neovim
              become: yes
              file:
                path: "/tmp/nvim-linux-x86_64.tar.gz"
                state: absent
              # tags:
              #   - neovim_bin
          # tags: neovim_bin
          # -----------------------------------------

    - block:
        - name: Instalar NVM
          # shell: curl -o- "https://raw.githubusercontent.com/nvm-sh/nvm/{{ nvm_version }}/install.sh" | bash
          ansible.builtin.shell: >
            bash --rcfile ~/.profile -c "curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/{{ nvm_version }}/install.sh | bash"
          args:
            # executable: /bin/zsh
            executable: /bin/bash

        - name: Carregar NVM e instalar Node.js LTS
          shell: |
            source ~/.nvm/nvm.sh
            nvm install --lts
            node --version
            npm --version
          args:
            executable: /bin/bash
          register: node_install
          changed_when: "'Already installed' not in node_install.stdout"
          tags:
            - node_npm_install

      tags: nvm_install
    # ----------------------------------------
    # INSTALL TMUX PLUGINS ------------------------------
    - block:
        - name: Clonar o repositório TPM
          git:
            repo: https://github.com/tmux-plugins/tpm.git
            dest: "{{ ansible_env.HOME }}/.tmux/plugins/tpm"
            version: master

        - name: Iniciar o servidor tmux (caso não esteja ativo)
          command: tmux start-server
          ignore_errors: yes

        - name: Criar uma sessão tmux detached para instalação do TPM
          command: tmux new-session -d -s tpm_install

        - name: Executar o script de instalação dos plugins do TPM
          command: tmux run-shell "~/.tmux/plugins/tpm/scripts/install_plugins.sh"

        - name: Encerrar a sessão usada para a instalação
          command: tmux kill-session -t tpm_install
      tags: tmux_conf
    # ------------------------------------------------------
    # Unify shell histories --------------------------------
    - name: Unify shell histories
      tags: unify_histories
      block:
        - name: "Check if ~/.zsh_history exists"
          stat:
            path: "{{ ansible_env.HOME }}/.zsh_history"
          register: zsh_history_stat
          # tags:
          #   - unify_histories

        - name: "Backup ~/.zsh_history to ~/.zsh_history.bak"
          copy:
            src: "{{ ansible_env.HOME }}/.zsh_history"
            dest: "{{ ansible_env.HOME }}/.zsh_history.bak"
            remote_src: yes
          when: zsh_history_stat.stat.exists
          # tags:
          #   - unify_histories

        - name: "Remove timestamps from ~/.zsh_history and copy to unified history"
          shell: |
            sed -E 's/^: [0-9]+:[0-9]+;//' "{{ ansible_env.HOME }}/.zsh_history" > "{{ unified_history }}"
          when: zsh_history_stat.stat.exists
          # tags:
          #   - unify_histories

        - name: "Remove original ~/.zsh_history"
          file:
            path: "{{ ansible_env.HOME }}/.zsh_history"
            state: absent
          when: zsh_history_stat.stat.exists
          # tags:
          #   - unify_histories

        - name: "Check if ~/.bash_history exists"
          stat:
            path: "{{ ansible_env.HOME }}/.bash_history"
          register: bash_history_stat
          # tags:
          #   - unify_histories

        - name: "Backup ~/.bash_history to ~/.bash_history.bak"
          copy:
            src: "{{ ansible_env.HOME }}/.bash_history"
            dest: "{{ ansible_env.HOME }}/.bash_history.bak"
            remote_src: yes
          when: bash_history_stat.stat.exists
          # tags:
          #   - unify_histories

        - name: "Append ~/.bash_history content to unified history"
          shell: |
            # Se ~/.history não existir, criamos o arquivo com o conteúdo; caso contrário, apenas adicionamos
            if [ -f "{{ unified_history }}" ]; then
              cat "{{ ansible_env.HOME }}/.bash_history" >> "{{ unified_history }}"
            else
              cp "{{ ansible_env.HOME }}/.bash_history" "{{ unified_history }}"
            fi
          when: bash_history_stat.stat.exists
          # tags:
          #   - unify_histories

        - name: "Remove original ~/.bash_history"
          file:
            path: "{{ ansible_env.HOME }}/.bash_history"
            state: absent
          when: bash_history_stat.stat.exists
          # tags:
          #   - unify_histories

        - name: "Insert or update Bash history unification block in ~/.bashrc"
          blockinfile:
            path: "{{ ansible_env.HOME }}/.bashrc"
            marker: "# {mark} UNIFY_HISTORIES_BASH"
            block: |
              # Unifica history --------------------------
              shopt -s histappend        # Faz o Bash acrescentar comandos ao invés de sobrescrever

              # Grava a cada comando, para sincronizar e sempre que o bash é retomado, ele se atualiza com últimos histories
              export PROMPT_COMMAND='history -n; history -a'

              # Sempre que o bash retoma, ele se atualiza com últimos histories
              # export PROMPT_COMMAND='history -n'

              # Substitui todos valores alfanuméricos, que são incompatíveis com o bash, se a sessão anterior não for bash (como zsh, ou sshd)

              # Obtém o nome do processo pai
              parent_proc=$(ps -p $PPID -o comm= 2>/dev/null | tr -d ' ')

              # Se o processo pai não for "bash", executa o sed
              if [ "$parent_proc" != "bash" ]; then
                sed -E -i.bak 's/^: [0-9]+:[0-9]+;//' "$HOME/.history"
              fi
              # ------- ------- --------------------------
          # tags:
          #   - unify_histories

        # - name: "Insert Zsh history unification block (top) in ~/.zshrc"
        #   blockinfile:
        #     path: "{{ ansible_env.HOME }}/.zshrc"
        #     marker: "# {mark} UNIFY_HISTORIES_ZSH_TOP"
        #     block: |
        #       # Unifica history --------------------------
        #       # Definindo HIST_STAMPS como vazio para evitar que um formato seja aplicado pelo oh-my-zsh
        #       export HIST_STAMPS=""
        #       # ------- ------- --------------------------
        #     insertbefore: BOF
        #   # tags:
        #   #   - unify_histories
        - name: "Insert Zsh history unification block (bottom) in ~/.zshrc"
          blockinfile:
            path: "{{ ansible_env.HOME }}/.zshrc"
            marker: "# {mark} UNIFY_HISTORIES_ZSH_BOTTOM"
            block: |
              # Unifica history --------------------------

              unsetopt extendedhistory   # Garante que o Zsh grave sem timestamps extra
              unsetopt extended_history     # Desativa o registro de timestamps
              unsetopt EXTENDED_HISTORY

              setopt appendhistory       # Para que o shell adicione comandos ao final do arquivo
              setopt inc_append_history  # Equivalente a 'history -n; history -a'

              export HIST_STAMPS=""           # Garante que nenhuma formatação de timestamp seja aplicada
              # ------- ------- --------------------------
            insertafter: EOF
          # tags:
          #   - unify_histories

        - name: "Notify user about backup files"
          debug:
            msg: >
              Se os arquivos ~/.zsh_history ou ~/.bash_history existiam, backups foram criados em:
              - {{ ansible_env.HOME }}/.zsh_history.bak
              - {{ ansible_env.HOME }}/.bash_history.bak
              Você pode removê-los se desejar.
          # tags:
          #   - unify_histories
    # ------------------------------------------------------

    - name: Definir Zsh como shell padrão
      become: yes
      user:
        name: "{{ ansible_user_id }}"
        shell: /bin/zsh
